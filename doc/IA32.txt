suffixes: 
  l = 4 bytes
  b = 1 byte

condition codes:
  CF = carry flag
  ZF = zero flag
  SF = sign flag
  OF = overflow flag

<label>:
// label is value at the address
// $label is the address

.globl <label>
// indicates label is a global label so that other parts of the program can see it

.text
// declares the start of a section of code

.data
// assemble the following statements onto the end of the data subsection 0

.asciz
// assembles each string into consecutive addresses adding a zero byte at the end

.long
// emit a number that, at run time, is the value of that expression

.double
// 64bit IEEE flonum

addl src dest
// dest = dest + src

subl src dest
// dest = dest - src

mull src dest
// dest = dest * src

divl src dest
// dest = dest / src

andl src dest
// dest = dest & src

orl src dest
// dest = dest | src

xorl src dest
// dest = dest ^ src

negl src dest
// dest = -dest

sarl src dest
// dest = dest >> src (arithmetic shift)

shll src dest
// dest = dest << src

setle dest
// dest = 1 if less or equal

sete dest
// dest = 1 if equal

setg dest
// dest = 1 if greater

setge dest
// dest = 1 if greater or equal

setl dest
// dest = 1 if less

setne dest
// dest = 1 if not equal

movb src dest
movl src dest
// dest = src

movzbl src dest
// dest = zero extend low byte of src to 4 bytes long

leal src dest
// dest = address of src

pushl src
// %esp = %esp - 4
// Mem[%esp] = src

call label
// push address of next instruction, jmp label

leave
// %esp = %ebp
// pop %ebp

ret
// %eip = Mem[%esp]
// %esp = %esp + 4

cmpl src2 src1
// sets condition codes to src1 - src2

jmp label
// jump

je label
// jump if equal

jne label
// jump if not equal

fildl src
// convert signed integer from memory into extended floating-point and push onto FPU stack

fldl src
// push the src onto the FPU stack

fstpl dest
// dest = st0
// pop

faddp
// st1 = st1 + st0
// pop (st1 now at top of stack)

fsubp
// st1 = st1 - st0
// pop

fmulp
// st1 = st1 * st0
// pop

fdivp
// st1 = st1 / st0
// pop
